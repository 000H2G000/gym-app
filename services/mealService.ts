import { getFirestore, collection, addDoc, doc, getDoc, getDocs, query, where, deleteDoc, updateDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebase/config';

// Meal Category Types
export type MealCategory = 'breakfast' | 'lunch' | 'dinner' | 'snack' | 'dessert';

// Base Meal Interface
export interface Meal {
  id: string;
  name: string;
  category: MealCategory;
  caloriesPer100g: number;
  proteinPer100g: number;
  carbsPer100g: number;
  fatPer100g: number;
  servingSizeGrams: number;
  defaultServings: number;
  image: string;
  ingredients: string[];
  recipe: string[];
}

// User Custom Meal Interface
export interface UserMeal extends Meal {
  isCustom: boolean;
  userId: string;
  createdAt: Date | string | number;
}

// Interface for custom meal (adding userId and ID fields)
export interface CustomMealData {
  userId: string;  // Owner of this meal
  id?: string;     // Generated by Firebase
  name: string;
  category: MealCategory;
  caloriesPer100g: number;
  proteinPer100g: number;
  carbsPer100g: number;
  fatPer100g: number;
  servingSizeGrams: number;
  defaultServings: number;
  image?: string;
  ingredients: string[];
  recipe: string[];
  createdAt?: any;
  updatedAt?: any;
}

// Nutrition Calculation Result
export interface NutritionResult {
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
}

// Example built-in meals database
const meals: Meal[] = [
  {
    id: 'meal1',
    name: 'Greek Yogurt with Berries',
    category: 'breakfast',
    caloriesPer100g: 83,
    proteinPer100g: 10,
    carbsPer100g: 5,
    fatPer100g: 2,
    servingSizeGrams: 200,
    defaultServings: 1,
    image: 'https://images.unsplash.com/photo-1606131731446-5568d87113aa?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',
    ingredients: ['Greek yogurt', 'Mixed berries', 'Honey', 'Granola'],
    recipe: ['Add yogurt to a bowl', 'Top with berries', 'Drizzle with honey', 'Sprinkle granola on top']
  },
  {
    id: 'meal2',
    name: 'Grilled Chicken Salad',
    category: 'lunch',
    caloriesPer100g: 120,
    proteinPer100g: 25,
    carbsPer100g: 5,
    fatPer100g: 3,
    servingSizeGrams: 300,
    defaultServings: 1,
    image: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',
    ingredients: ['Grilled chicken breast', 'Mixed greens', 'Cherry tomatoes', 'Cucumber', 'Balsamic vinaigrette'],
    recipe: ['Grill chicken until fully cooked', 'Slice chicken into strips', 'Mix salad ingredients', 'Top with chicken and dressing']
  },
  {
    id: 'meal3',
    name: 'Salmon with Roasted Vegetables',
    category: 'dinner',
    caloriesPer100g: 200,
    proteinPer100g: 22,
    carbsPer100g: 10,
    fatPer100g: 12,
    servingSizeGrams: 350,
    defaultServings: 1,
    image: 'https://images.unsplash.com/photo-1467003909585-2f8a72700288?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',
    ingredients: ['Salmon fillet', 'Broccoli', 'Bell peppers', 'Olive oil', 'Lemon', 'Garlic', 'Herbs'],
    recipe: ['Preheat oven to 400Â°F', 'Season salmon with herbs, garlic and lemon', 'Roast vegetables with olive oil', 'Bake salmon until flaky', 'Serve together']
  },
  {
    id: 'meal4',
    name: 'Protein Smoothie',
    category: 'snack',
    caloriesPer100g: 95,
    proteinPer100g: 15,
    carbsPer100g: 12,
    fatPer100g: 2,
    servingSizeGrams: 300,
    defaultServings: 1,
    image: 'https://images.unsplash.com/photo-1553530979-8fc8d6903467?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',
    ingredients: ['Protein powder', 'Banana', 'Almond milk', 'Peanut butter', 'Ice'],
    recipe: ['Add all ingredients to blender', 'Blend until smooth', 'Pour into glass']
  },
  {
    id: 'meal5',
    name: 'Dark Chocolate Chia Pudding',
    category: 'dessert',
    caloriesPer100g: 150,
    proteinPer100g: 6,
    carbsPer100g: 18,
    fatPer100g: 9,
    servingSizeGrams: 120,
    defaultServings: 1,
    image: 'https://images.unsplash.com/photo-1495147466023-ac5c588e2e94?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',
    ingredients: ['Chia seeds', 'Almond milk', 'Dark chocolate', 'Maple syrup', 'Vanilla extract'],
    recipe: ['Mix chia seeds with almond milk', 'Add melted dark chocolate', 'Stir in maple syrup and vanilla', 'Refrigerate for 4 hours', 'Top with fruit or nuts']
  }
];

// Local cache for user's custom meals
let userCustomMeals: Meal[] = [];

// Get all meal categories
export const getMealCategories = (): MealCategory[] => {
  return ['breakfast', 'lunch', 'dinner', 'snack', 'dessert'];
};

// Get meals filtered by category
export const getMealsByCategory = (category: MealCategory, userId?: string): Meal[] => {
  const predefinedMeals = meals.filter(meal => meal.category === category);

  if (userId) {
    const customMeals = userCustomMeals.filter(meal => meal.category === category);
    return [...predefinedMeals, ...customMeals];
  }

  return predefinedMeals;
};

// Search meals by name
export const searchMealsByName = (query: string, userId?: string): Meal[] => {
  const lowercaseQuery = query.toLowerCase();
  const predefinedResults = meals.filter(meal => 
    meal.name.toLowerCase().includes(lowercaseQuery) ||
    meal.ingredients.some(ingredient => ingredient.toLowerCase().includes(lowercaseQuery))
  );

  if (userId) {
    const customResults = userCustomMeals.filter(meal =>
      meal.name.toLowerCase().includes(lowercaseQuery)
    );
    return [...predefinedResults, ...customResults];
  }

  return predefinedResults;
};

// Get a meal by ID
export const getMealById = (id: string, userId?: string): Meal | undefined => {
  const predefinedMeal = meals.find(meal => meal.id === id);
  if (predefinedMeal) return predefinedMeal;

  if (userId) {
    return userCustomMeals.find(meal => meal.id === id);
  }

  return undefined;
};

// Calculate nutrition based on total grams
export const calculateNutrition = (meal: Meal, totalGrams: number): NutritionResult => {
  const ratio = totalGrams / 100;
  
  return {
    calories: Math.round(meal.caloriesPer100g * ratio),
    protein: Math.round(meal.proteinPer100g * ratio * 10) / 10,
    carbs: Math.round(meal.carbsPer100g * ratio * 10) / 10,
    fat: Math.round(meal.fatPer100g * ratio * 10) / 10
  };
};

// Add a custom meal to Firebase
export const addCustomMeal = async (userId: string, mealData: Omit<Meal, 'id'>): Promise<string> => {
  try {
    const customMealData: CustomMealData = {
      ...mealData,
      userId,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    };
    
    const docRef = await addDoc(collection(db, 'customMeals'), customMealData);
    
    const newMeal = { 
      ...mealData, 
      id: docRef.id 
    };
    
    userCustomMeals.push(newMeal);
    
    return docRef.id;
  } catch (error) {
    console.error('Error adding custom meal:', error);
    throw error;
  }
};

// Get all custom meals for a user
export const getUserCustomMeals = async (userId: string): Promise<Meal[]> => {
  try {
    const q = query(collection(db, 'customMeals'), where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    
    const meals: Meal[] = [];
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      meals.push({ 
        id: doc.id,
        name: data.name,
        category: data.category,
        caloriesPer100g: data.caloriesPer100g,
        proteinPer100g: data.proteinPer100g,
        carbsPer100g: data.carbsPer100g,
        fatPer100g: data.fatPer100g,
        servingSizeGrams: data.servingSizeGrams,
        defaultServings: data.defaultServings,
        image: data.image,
        ingredients: data.ingredients,
        recipe: data.recipe
      });
    });
    
    userCustomMeals = meals;
    
    return meals;
  } catch (error) {
    console.error('Error getting user custom meals:', error);
    throw error;
  }
};

// Delete a custom meal
export const deleteCustomMeal = async (mealId: string): Promise<void> => {
  try {
    await deleteDoc(doc(db, 'customMeals', mealId));
    
    userCustomMeals = userCustomMeals.filter(meal => meal.id !== mealId);
  } catch (error) {
    console.error('Error deleting custom meal:', error);
    throw error;
  }
};

// Update a custom meal
export const updateCustomMeal = async (mealId: string, updates: Partial<Meal>): Promise<void> => {
  try {
    const mealRef = doc(db, 'customMeals', mealId);
    
    await updateDoc(mealRef, {
      ...updates,
      updatedAt: serverTimestamp()
    });
    
    const index = userCustomMeals.findIndex(meal => meal.id === mealId);
    if (index !== -1) {
      userCustomMeals[index] = {
        ...userCustomMeals[index],
        ...updates
      };
    }
  } catch (error) {
    console.error('Error updating custom meal:', error);
    throw error;
  }
};

// Get all meals, including user's custom meals
export const getAllMeals = async (userId?: string): Promise<Meal[]> => {
  const allMeals = [...meals];
  
  if (userId) {
    try {
      if (userCustomMeals.length === 0) {
        const customMeals = await getUserCustomMeals(userId);
        return [...allMeals, ...customMeals];
      }
      
      return [...allMeals, ...userCustomMeals];
    } catch (error) {
      console.error('Error getting all meals:', error);
      return allMeals;
    }
  }
  
  return allMeals;
};